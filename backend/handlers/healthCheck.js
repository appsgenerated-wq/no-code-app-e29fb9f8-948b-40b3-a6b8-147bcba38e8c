// TEMPORARY: Allowlist-based CORS health handler generated by AppAssembler.
// Reads ALLOWED_ORIGINS env var (comma-separated). Supports '*' wildcards, e.g. https://*.stackblitz.io
// TODO: For production, move CORS handling to a gateway or use a strict allowlist managed centrally.
module.exports = async (req, res, manifest) => {
  const timestamp = new Date().toISOString();
  const appId = req.get('X-App-ID') || 'Unknown';
  console.log('üîç [HEALTH] Health check at ' + timestamp + ', App ID: ' + appId);
  try {
    const origin = req.get('Origin');
    const raw = process.env.ALLOWED_ORIGINS || '';
    const patterns = raw.split(',').map(s => s.trim()).filter(Boolean);
    const matches = (o) => {
      if (!o) return false;
      for (const p of patterns) {
        if (!p) continue;
        if (p.includes('*')) {
          const reStr = '^' + p.split('*').map(s => s.replace(/[.*+?^${}()|[\]\]/g,'\\$&')).join('.*') + '$';
          const re = new RegExp(reStr);
          if (re.test(o)) return true;
        } else {
          if (p === o) return true;
        }
      }
      return false;
    };
    const allowed = matches(origin);
    if (allowed) {
      res.setHeader('Access-Control-Allow-Origin', origin);
      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
      const reqHeaders = req.get('Access-Control-Request-Headers') || 'Content-Type, Authorization, X-App-ID';
      res.setHeader('Access-Control-Allow-Headers', reqHeaders);
      res.setHeader('Access-Control-Allow-Credentials', 'true');
    }
    if (req.method === 'OPTIONS') {
      return res.status(204).send();
    }
    const healthStatus = { status: 'ok', timestamp: timestamp, appId: appId, manifest: 'running', version: '1.0.0' };
    console.log('‚úÖ [HEALTH] Health check successful:', healthStatus);
    res.status(200).json(healthStatus);
  } catch (error) {
    console.error('‚ùå [HEALTH] Health check failed:', error);
    // On error, do NOT expose permissive CORS headers; default to 500 without CORS
    res.status(500).json({ status: 'error' });
  }
};